{"version":3,"sources":["components/pin/index.tsx","utils.ts","server/request.ts","components/login/index.tsx","server/api.ts","components/new-pin/index.tsx","components/pins/index.tsx","components/user/index.tsx","components/header/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Pin","props","pin","title","url","description","user","createdAt","className","href","target","username","createAt","console","log","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","formatTime","successNotification","message","notification","failNotification","handleResult","res","success","fail","data","status","msg","beQueryString","obj","prefix","keys","Object","length","reduce","prev","cur","index","connector","baseUrl","getRequest","a","params","axios","get","postRequest","post","layout","labelCol","span","wrapperCol","tailLayout","offset","Login","useState","visible","setVisible","type","setType","computeStatusText","values","text","api","updateLoginStatus","loginStatus","onClick","footer","onCancel","name","onFinish","Item","label","rules","required","Password","block","htmlType","NewPin","handleOk","handleCancel","onOk","then","err","allowClear","TextArea","initialState","pageNo","pageSize","total","list","reducer","state","action","payload","Pins","useReducer","dispatch","getPins","useEffect","map","key","id","current","onChange","User","max","PopContent","Modal","confirm","icon","ExclamationCircleOutlined","content","okText","cancelText","Math","floor","random","color","placement","style","backgroundColor","verticalAlign","size","shape","gap","slice","Header","setLoginStatus","setUsername","login","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.12474596.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./index.less\"\nimport {APin} from \"../pins\"\n\ninterface PinProps {\n  pin: APin\n}\n\nconst Pin: React.FC<PinProps> = (props) => {\n  const {title, url, description, user, createdAt} = props.pin\n  const style = {\n    fontSize: 20\n  }\n\n  function formatTime(createAt: string) {\n    console.log(createAt)\n    const date = new Date(createAt)\n    console.log(date)\n    return date.getFullYear() + \"-\" +\n      (date.getMonth() + 1) + \"-\" +\n      date.getDate() + \" \" +\n      date.getHours() + \":\" +\n      date.getMinutes()\n  }\n\n  return (\n    <div className=\"pin-wrapper\">\n      <div className=\"main-content\">\n        <a className=\"title\" href={url} target={\"_blank\"}>\n          {title}\n        </a>\n        <div className=\"instruction\">\n          {user.username}投稿[{formatTime(createdAt)}]\n        </div>\n      </div>\n      <div className=\"recommended-language\">\n        {description || \"他有点懒，没有写推荐语\"}\n      </div>\n      {/*<div className=\"infos\">*/}\n      {/*  <div className={'info'}>*/}\n      {/*    <HeartTwoTone style={style} twoToneColor=\"#fb7299\"  />*/}\n      {/*    <span className={'num'}>(12)</span>*/}\n      {/*  </div>*/}\n      {/*  <div className={'info'}>*/}\n      {/*    <MessageTwoTone style={style} twoToneColor=\"#fb7299\"  />*/}\n      {/*    <span className={'num'}>(12)</span>*/}\n      {/*  </div>*/}\n      {/*</div>*/}\n    </div>\n  )\n}\n\nexport default Pin\n","import {notification} from \"antd\"\nimport {AxiosResponse} from \"axios\"\n\nexport const successNotification = (description: string, message?: string) => notification[\"success\"]({\n  message: message || \"成功\",\n  description:\n    description || \"\"\n})\n\nexport const failNotification = (description: string, message?: string) => notification[\"error\"]({\n  message: message || \"失败\",\n  description:\n    description || \"\"\n})\n\n\nexport interface Res {\n  msg: string;\n  data: object;\n  status: \"fail\" | \"ok\"\n}\n\ninterface PrimaryTypeObject {\n  [key: string]: any;\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\ntype Callback = (msg: string) => void\n\nexport function handleResult(res: AxiosResponse<Res>, success: Callback, fail?: Callback) {\n  if (res.data.status === \"ok\") {\n    success(res.data.msg)\n  } else if (res.data.status === \"fail\") {\n    fail && fail(res.data.msg)\n  }\n}\n\nexport function beQueryString(obj: PrimaryTypeObject, prefix: string = \"?\"): string {\n  const keys = Object.keys(obj)\n  if (keys.length === 0) {\n    return \"\"\n  }\n  return keys.reduce((prev, cur, index) => {\n    let connector = \"\"\n    if (index !== 0) {\n      connector = \"&\"\n    }\n    return `${prev}${connector}${cur}=${obj[cur]}`\n  }, prefix)\n}\n\n","import axios from \"axios\"\nimport {beQueryString} from \"../utils\"\n\nconst baseUrl = \"http://localhost:8080\"\n\nexport const getRequest = async (url: string, params: object = {}) => {\n  return axios.get(baseUrl + url + beQueryString(params))\n}\n\nexport const postRequest = async (url: string, params?: object) => {\n  return axios.post(baseUrl + url, params)\n}\n","import React, {Fragment, useState} from \"react\"\nimport {Button, Form, Input, Modal} from \"antd\"\nimport \"./index.scss\"\nimport {postRequest} from \"../../server/request\"\nimport {login, register} from \"../../server/api\"\nimport {failNotification, handleResult, Res, successNotification} from \"../../utils\"\nimport {AxiosResponse} from \"axios\"\n\nexport const layout = {\n  labelCol: {span: 6},\n  wrapperCol: {span: 16}\n}\nexport const tailLayout = {\n  wrapperCol: {offset: 6, span: 16}\n}\n\ninterface LoginValues {\n  username: string;\n  password: string;\n}\n\ninterface LoginProps {\n  loginStatus?: boolean;\n  updateLoginStatus: (status: boolean) => void\n}\n\n\nconst Login: React.FC<LoginProps> = (props) => {\n  const [visible, setVisible] = useState<boolean>()\n  const [type, setType] = useState<\"login\" | \"register\">()\n\n  function handleCancel() {\n    setVisible(false)\n  }\n\n  function computeStatusText() {\n    return type === \"login\" ? \"登录\" : \"注册\"\n  }\n\n  async function onFinish(values: LoginValues) {\n    console.log(values)\n    const text = computeStatusText()\n    const api = type === \"login\" ? login : register\n\n    try {\n      const res: AxiosResponse<Res> = await postRequest(api, values)\n      handleResult(res, () => {\n        successNotification(text + \"成功\")\n        props.updateLoginStatus(true)\n        setVisible(false)\n      }, (msg) => {\n        failNotification(msg)\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  function handleLogin() {\n    setType(\"login\")\n    setVisible(true)\n  }\n\n\n  function handleRegister() {\n    setType(\"register\")\n    setVisible(true)\n  }\n\n  return (\n    <div className={\"pins-login\"}>\n      {\n        !props.loginStatus &&\n        <Fragment>\n            <div className={\"login\"} onClick={handleLogin}>登录</div>\n            <div className={\"register\"} onClick={handleRegister}>注册</div>\n        </Fragment>\n      }\n      <Modal\n        title={computeStatusText()}\n        footer={null}\n        visible={visible}\n        onCancel={handleCancel}\n      >\n        <Form\n          {...layout}\n          name=\"basic\"\n          onFinish={onFinish}\n        >\n          <Form.Item\n            label=\"Username\"\n            name=\"username\"\n            rules={[{required: true, message: \"Please input your username!\"}]}\n          >\n            <Input/>\n          </Form.Item>\n\n          <Form.Item\n            label=\"Password\"\n            name=\"password\"\n            rules={[{required: true, message: \"Please input your password!\"}]}\n          >\n            <Input.Password/>\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" block htmlType=\"submit\">\n              提交\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Login\n","export const auth = \"/auth\"\nexport const login = \"/auth/login\"\nexport const register = \"/auth/register\"\nexport const logout = \"/auth/logout\"\n\nexport const blog = \"/blog\"\n\n","import React, {useState} from \"react\"\nimport {Button, Form, Input, Modal} from \"antd\"\nimport {layout, tailLayout} from \"../login\"\nimport {postRequest} from \"../../server/request\"\nimport {blog} from \"../../server/api\"\nimport {failNotification, successNotification} from \"../../utils\"\n\ninterface Values {\n  title: string;\n  url: string;\n  description: string;\n}\n\nconst NewPin = () => {\n  const [visible, setVisible] = useState<boolean>()\n\n  function handleOk() {\n    setVisible(true)\n  }\n\n  function handleCancel() {\n    setVisible(false)\n  }\n\n  function onFinish(values: Values) {\n    postRequest(blog, {\n      ...values,\n      type: 1\n    }).then((res) => {\n      successNotification(\"新增成功\")\n      handleCancel()\n    }, (err) => {\n      failNotification(\"没有登录是不能投稿的\")\n    })\n\n  }\n\n  return (\n    <div>\n      <Button type={\"primary\"} className={\"new-pins-btn\"} onClick={handleOk}>投稿</Button>\n      <Modal\n        title=\"投稿\"\n        visible={visible}\n        onOk={handleOk}\n        footer={null}\n        onCancel={handleCancel}\n      >\n        <Form\n          {...layout}\n          name=\"basic\"\n          onFinish={onFinish}\n        >\n          <Form.Item\n            label=\"标题\"\n            name=\"title\"\n            rules={[{required: true}]}\n          >\n            <Input/>\n          </Form.Item>\n          <Form.Item\n            label=\"链接地址\"\n            name=\"url\"\n            rules={[{required: true}]}\n          >\n            <Input allowClear/>\n          </Form.Item>\n\n          <Form.Item\n            label=\"推荐语\"\n            name=\"description\"\n          >\n            <Input.TextArea/>\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" block htmlType=\"submit\">\n              投一个\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default NewPin\n","import React, {useEffect, useReducer} from \"react\"\nimport Pin from \"../pin\"\nimport NewPin from \"../new-pin\"\nimport \"./index.less\"\nimport {Pagination, Spin} from \"antd\"\nimport {getRequest} from \"../../server/request\"\nimport {blog} from \"../../server/api\"\nimport {failNotification} from \"../../utils\"\n\ninterface PinReducerState {\n  pageNo: number;\n  pageSize: number;\n  total: number;\n  list: APin[];\n}\n\ninterface PinReducerAction {\n  type: string;\n  payload: any;\n}\n\nexport interface APin {\n  id: number;\n  title: string;\n  description: string;\n  url: string;\n  createdAt: string\n  user: {\n    username: string\n  }\n}\n\nconst initialState = {\n  pageNo: 1,\n  pageSize: 10,\n  total: 0,\n  list: []\n}\n\n\nfunction reducer(state: PinReducerState, action: PinReducerAction) {\n  switch (action.type) {\n    case \"updatePagination\":\n      return {\n        ...state,\n        ...action.payload\n      }\n    case \"updateList\":\n      return {\n        ...state,\n        list: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nconst Pins = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    getPins(state.pageNo, state.pageSize)\n  }, [])\n\n  async function getPins(pageNo: number, pageSize: number) {\n    try {\n      const res = await getRequest(blog, {\n        pageNo,\n        pageSize\n      })\n      console.log(res)\n\n      dispatch({\n        type: \"updatePagination\",\n        payload: {\n          pageNo: pageNo,\n          total: res.data.total\n        }\n      })\n\n      dispatch({\n        type: \"updateList\",\n        payload: res.data.list\n      })\n    } catch (e) {\n      failNotification(\"没有权限访问，是不是没有登录？\")\n    }\n  }\n\n  function handleSearch(pageNo: number = 1, pageSize: number = 10) {\n    getPins(pageNo, pageSize)\n  }\n\n  return (\n    <div className={\"pins-wrapper\"}>\n      <NewPin/>\n      <div className=\"pins-container\">\n        {\n          state.list.map(function (pin: APin) {\n            return <Pin pin={pin} key={pin.id}/>\n          })\n        }\n      </div>\n      {state.list.length === 0 && <Spin/>}\n      {state.list.length > 0 &&\n      <Pagination\n          current={state.pageNo}\n          pageSize={state.pageSize}\n          total={state.total}\n          onChange={handleSearch}\n      />}\n    </div>\n  )\n}\n\nexport default Pins\n","import React, {useState} from \"react\"\nimport {Avatar, Modal, Popover} from \"antd\"\nimport \"./index.scss\"\nimport {getRandomInt, handleResult, successNotification} from \"../../utils\"\nimport {ExclamationCircleOutlined} from \"@ant-design/icons\"\nimport {getRequest} from \"../../server/request\"\nimport {logout} from \"../../server/api\"\n\ninterface UserProps {\n  loginStatus?: boolean;\n  username?: string;\n  updateLoginStatus: (statue: boolean) => void\n}\n\nconst User: React.FC<UserProps> = (props) => {\n  const {username} = props\n\n  function handleLogout() {\n    Modal.confirm({\n      title: \"Confirm\",\n      icon: <ExclamationCircleOutlined/>,\n      content: \"确认要登出吗？\",\n      okText: \"确认\",\n      cancelText: \"取消\",\n      onOk: () => {\n        getRequest(logout).then(res => {\n          handleResult(res, () => {\n            successNotification(\"登出成功\")\n            props.updateLoginStatus(false)\n          })\n        })\n      }\n    })\n  }\n\n  const PopContent = (\n    <div className=\"profile-list\">\n      <div className=\"profile-item\" onClick={handleLogout}>登出</div>\n    </div>\n  )\n\n  const ColorList = [\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"]\n\n  const [color] = useState(ColorList[getRandomInt(3)])\n\n  return (\n    <div>\n      {props.loginStatus && (\n        <div>\n          <Popover placement=\"bottomLeft\" title={username} content={PopContent}>\n            <Avatar\n              style={{backgroundColor: color, verticalAlign: \"middle\"}}\n              size={48}\n              shape={\"circle\"}\n              gap={4}\n            >\n              {username ? username.slice(0, 6) : \"\"}\n            </Avatar>\n          </Popover>\n\n        </div>\n      )\n      }</div>\n  )\n}\n\nexport default User\n","import React, {useEffect, useState} from \"react\"\nimport User from \"../user\"\nimport Login from \"../login\"\nimport \"./index.less\"\nimport {getRequest} from \"../../server/request\"\nimport {auth} from \"../../server/api\"\n\nconst Header = () => {\n  const [loginStatus, setLoginStatus] = useState<boolean>()\n  const [username, setUsername] = useState<string>()\n\n\n  useEffect(() => {\n    updateLoginStatus()\n  }, [])\n\n  function updateLoginStatus() {\n    getRequest(auth).then(res => {\n\n      setLoginStatus(res.data.login)\n      res.data.data && setUsername(res.data.data.username)\n    })\n  }\n\n  return (\n    <div className=\"pins-header\">\n      <div className=\"pins-left-header\">\n        <h3 className={\"project-name\"}/>\n      </div>\n      <div className=\"pins-right-header\">\n        <Login loginStatus={loginStatus} updateLoginStatus={updateLoginStatus}/>\n        <User loginStatus={loginStatus} updateLoginStatus={updateLoginStatus} username={username}/>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import React from \"react\"\nimport Pins from \"./components/pins\"\nimport \"antd/dist/antd.less\"\nimport \"./App.less\"\nimport Header from \"./components/header\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Pins/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\"Service-Worker\": \"script\"}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <App/>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}